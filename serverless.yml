# This is a test service that tries out a few different features
# and a plugin for defining a custom set of default responses,
# including error responses.

service: test

provider:
  name: aws
  runtime: python2.7
  stage: dev

# can globally exclude, then include function by function where needed
package:
  individually: true
  include:
    - handlers/__init__.py
    - lib/__init__.py
    - lib/responses.py
  exclude:
    - ""

# what you define in custom is available to plugins
custom:
  standardResponseHeaders:
    'Content-Type': "integration.response.body.headers.Content-Type"
  standardResponseTemplate: "$input.path('$.body')"
  errorResponseTemplate: "$util.parseJson($input.path('$.errorMessage')).body"
  standardResponses:
    200:
      headers: ${self:custom.standardResponseHeaders}
      templates:
        'application/json': ${self:custom.standardResponseTemplate}
    400:
      templates:
        'application/json': ${self:custom.errorResponseTemplate}
      properties:
        SelectionPattern: '.*\"statusCode\":\s?400.*'
    404:
      templates:
        'application/json': ${self:custom.errorResponseTemplate}
      properties:
        SelectionPattern: '.*\"statusCode\":\s?404.*'
  standardCors:
    origins:
      - '*'
    headers:
      - Authorization
      - Content-Type
      - User-Agent

plugins:
  - serverless-plugin-multiple-responses

# cors: true
# is a simpler option, equivalent to
# cors:
#   origins:
#     - '*'
#   headers:
#     - Content-Type
#     - X-Amz-Date
#     - Authorization
#     - X-Api-Key
#     - X-Amz-Security-Token
# (https://github.com/serverless/serverless/blob/7d63e439a0140c5756a5efc8b612bdbdc664e752/docs/02-providers/aws/events/01-apigateway.md)

functions:
  hello:
    handler: handlers/hello.handler
    package:
      include:
        - handlers/hello/
    events:
      - http:
          method: GET
          path: greet
          cors: ${self:custom.standardCors}
          responses: ${self:custom.standardResponses}
      - http:
          method: POST
          path: greet
          cors: ${self:custom.standardCors}
          responses: ${self:custom.standardResponses}
      - http:
          method: GET
          path: hola/{name}
          cors: ${self:custom.standardCors}
          responses: ${self:custom.standardResponses}
  second:
    handler: handlers/second.handler
    package:
      include:
        - lib/templates/extern.txt
        - handlers/second/
    events:
      - http:
          method: GET
          path: second
          cors: ${self:custom.standardCors}
          request:
            template:
              application/json: '{ "method" : "$context.httpMethod" }'
          responses: ${self:custom.standardResponses}
      - http:
          method: GET
          path: extern
          cors: ${self:custom.standardCors}
          request:
            template:
              application/json: ${file(lib/templates/extern.txt)}
          responses: ${self:custom.standardResponses}
  ctype:
    handler: handlers/ctype.handler
    package:
      include:
        - handlers/ctype/
    events:
      - http:
          method: GET
          path: type/{type}
          cors: ${self:custom.standardCors}
          responses: ${self:custom.standardResponses}
  miss:
    handler: handlers/miss.handler
    package:
      include:
        - handlers/miss/
    events:
      - http:
          method: GET
          path: "{var+}"
          responses: ${self:custom.standardResponses}
# point of interest -
# - http: GET {var}
# works, but with path defined separately, unquoted {var} fails to deploy

# another point of interest - {var} alone only matches the first
# path segment, i.e. only 'foo' out of 'foo/bar'
# AWS released catch-all patterns (using +) 2016-09-20
